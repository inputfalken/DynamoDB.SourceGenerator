using Microsoft.CodeAnalysis;
namespace DynamoDBGenerator.SourceGenerator.Extensions;

public static class CodeGenerationExtensions
{
    /// <summary>
    ///     Creates a namespace based on the type.
    /// </summary>
    public static string CreateNamespace(this ITypeSymbol type, in string content)
    {
        var nameSpace = type.ContainingNamespace.IsGlobalNamespace
            ? null
            : type.ContainingNamespace.ToString();

        return @$"// <auto-generated at {DateTime.Now:yyyy-MM-dd HH:mm:ss ""GMT""zzz}/>
#nullable enable
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Amazon.DynamoDBv2.Model;
using DynamoDBGenerator;
using DynamoDBGenerator.Attributes;
using DynamoDBGenerator.Exceptions;

{(nameSpace is null ? null : $@"namespace {nameSpace}
{{")}
    {content}
{(nameSpace is null ? null : @"}
")}";
    }

    /// <summary>
    ///     Creates a class based on the type.
    /// </summary>
    public static string CreateClass(this ITypeSymbol type, in string content, in int indentLevel = 1)
    {
        return CreateClass(Accessibility.Public, type.Name, in content, in indentLevel, isPartial: true);
    }

    public static string CreateClass(in Accessibility accessibility, in string className, in string content, in int indentLevel, in bool isPartial = false)
    {
        var indent = StringExtensions.Indent(indentLevel);
        var indent2 = StringExtensions.Indent(indentLevel + 1);
        return $@"{accessibility.ToCode()}{(isPartial ? " partial" : null)} class {className}
{indent}{{
{indent2}{content}
{indent}}}";
    }
    public static string CreateStruct(in Accessibility accessibility, in string structName, in string content, in int indentLevel, in bool isPartial = false, in bool isReadonly = false, bool isRecord = false)
    {
        var indent = StringExtensions.Indent(indentLevel);
        var indent2 = StringExtensions.Indent(indentLevel + 1);
        return $@"{accessibility.ToCode()}{(isPartial ? " partial" : null)}{(isReadonly ? " readonly" : null)}{(isRecord? " record" : null)} struct {structName}
{indent}{{
{indent2}{content}
{indent}}}";
    }
}