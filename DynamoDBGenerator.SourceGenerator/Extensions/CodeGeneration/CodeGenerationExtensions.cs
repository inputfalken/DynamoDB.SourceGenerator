using DynamoDBGenerator.SourceGenerator.Extensions.CodeGeneration.CSharpToAttributeValue;
using Microsoft.CodeAnalysis;

namespace DynamoDBGenerator.SourceGenerator.Extensions.CodeGeneration;

public static class CodeGenerationExtensions
{
    /// <summary>
    ///     Generated attribute value conversion.
    /// </summary>
    /// <param name="type">
    ///     The root type to create attribute value conversions from.
    /// </param>
    /// <param name="settings">
    ///     Instructions for how the internal source generator should perform its generations.
    /// </param>
    /// <returns></returns>
    public static SourceGeneratedAttributeValueFactory GeneratePocoToAttributeValueFactory(this ITypeSymbol type,
        in Settings settings)
    {
        return new Generation(in settings, type).CreateAttributeValueFactory();
    }

    /// <summary>
    ///     Creates a namespace based on the type.
    /// </summary>
    public static string CreateNamespace(this ITypeSymbol type, string content)
    {
        var nameSpace = type.ContainingNamespace.IsGlobalNamespace
            ? null
            : type.ContainingNamespace.ToString();

        return @$"// <auto-generated at {DateTime.Now:yyyy-MM-dd HH:mm:ss ""GMT""zzz}/>
#nullable enable
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Amazon.DynamoDBv2.Model;

{(nameSpace is null ? null : $@"namespace {nameSpace}
{{")}
    {content}
{(nameSpace is null ? null : @"}
")}";
    }

    /// <summary>
    ///     Creates a class based on the type.
    /// </summary>
    /// <param name="type"></param>
    /// <param name="content"></param>
    /// <returns></returns>
    public static string CreateClass(this ITypeSymbol type, string content)
    {
        return @$"partial class {type.Name}
    {{
        {content}
    }}";
    }
}