using System.Diagnostics;
using DynamoDBGenerator.SourceGenerator.Extensions;
using DynamoDBGenerator.SourceGenerator.Generations;
using DynamoDBGenerator.SourceGenerator.Types;
using Microsoft.CodeAnalysis;
using static DynamoDBGenerator.SourceGenerator.Constants.DynamoDBGenerator.Marshaller;
using static DynamoDBGenerator.SourceGenerator.Generations.Marshalling.Marshaller;

namespace DynamoDBGenerator.SourceGenerator;

public static class MarshallerFactory
{
    private static IEnumerable<string> CreateImplementations(
        ITypeSymbol parentType,
        DynamoDBMarshallerArguments[] arguments,
        MarshallerOptions options)
    {
        foreach (var argument in arguments)
        {
            var (expressionValueMethod, valueTrackerTypeName) = AttributeExpressionValue.RootSignature(parentType, argument.ArgumentType.TypeSymbol);
            var (expressionMethodName, nameTrackerTypeName) = AttributeExpressionName.RootSignature(parentType, argument.EntityTypeSymbol.TypeSymbol);
            var constructor =
                $"public {argument.ImplementationName}({options.FullName} {MarshallerOptions.ParamReference})"
                    .CreateScope($"{MarshallerOptions.FieldReference} = {MarshallerOptions.ParamReference};",
                        $"{KeyMarshaller.PrimaryKeyMarshallerReference} = {KeyMarshaller.AssignmentRoot(argument.EntityTypeSymbol.TypeSymbol)};");
            
            var implementation = constructor
                .Concat(RootSignature(argument.EntityTypeSymbol))
                .Concat(UnMarshaller.RootSignature(argument.EntityTypeSymbol))
                .Concat(KeyMarshaller.IndexKeyMarshallerRootSignature(argument.EntityTypeSymbol.TypeSymbol))
                .Concat(expressionValueMethod)
                .Append(expressionMethodName)
                .Append(KeyMarshaller.PrimaryKeyMarshallerDeclaration)
                .Prepend(options.FieldDeclaration)
                .ScopeTo($"file sealed class {argument.ImplementationName}: {Interface}<{argument.EntityTypeSymbol.AnnotatedString}, {argument.ArgumentType.AnnotatedString}, {nameTrackerTypeName}, {valueTrackerTypeName}>");

            foreach (var row in implementation)
                yield return row;
        }
    }

    private static IEnumerable<string> PublicProperties(ITypeSymbol parentType, DynamoDBMarshallerArguments[] arguments,
        MarshallerOptions options)
    {
        foreach (var argument in arguments)
        {
            var valueTrackerTypeName = AttributeExpressionValue.GloballyAccessibleName(parentType, argument.ArgumentType.TypeSymbol);
            var nameTrackerTypeName = AttributeExpressionName.GloballyAccessibleName(parentType, argument.EntityTypeSymbol.TypeSymbol);
            yield return options.TryInstantiate() switch
            {
                { } arg => $"public static {Interface}<{argument.EntityTypeSymbol.AnnotatedString}, {argument.ArgumentType.AnnotatedString}, {nameTrackerTypeName}, {valueTrackerTypeName}> {argument.AccessName} {{ get; }} = new {argument.ImplementationName}({arg});",
                null => $"public static {Interface}<{argument.EntityTypeSymbol.AnnotatedString}, {argument.ArgumentType.AnnotatedString}, {nameTrackerTypeName}, {valueTrackerTypeName}> {argument.AccessName}({options.FullName} options) => new {argument.ImplementationName}(options);"
            };
        }
    }

    public static IEnumerable<string> Create(
        INamedTypeSymbol originatingType,
        DynamoDBMarshallerArguments[] arguments,
        MarshallerOptions options
    )
    {
        var timestamp = Stopwatch.GetTimestamp();
        yield return $@"// <auto-generated | TimeStamp: {DateTime.Now:yyyy-MM-dd HH:mm:ss}>
#nullable enable
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using {Constants.AWSSDK_DynamoDBv2.Namespace.ModelFullName};
using {Constants.DynamoDBGenerator.Namespace.Root};
using {Constants.DynamoDBGenerator.Namespace.AttributesFullName};
using {Constants.DynamoDBGenerator.Namespace.ExceptionsFullName};
using {Constants.DynamoDBGenerator.Namespace.InternalFullName};";

        var dynamoDbProperties = TypeExtensions.CacheFactory(
            SymbolEqualityComparer.IncludeNullability,
            TypeExtensions.GetDynamoDbProperties
        );

        var partialClassCode = PublicProperties(originatingType, arguments, options)
            .Concat(options.ClassDeclaration)
            .Concat(AttributeExpressionName.CreateClasses(arguments, dynamoDbProperties, options))
            .Concat(AttributeExpressionValue.CreateClasses(arguments, dynamoDbProperties, options));

        var code = originatingType.NamespaceDeclaration(
            originatingType
                .TypeDeclaration()
                .CreateScope(partialClassCode)
                .Concat(CreateImplementations(originatingType, arguments, options))
                .Concat(CreateClass(arguments, dynamoDbProperties, options))
                .Concat(UnMarshaller.CreateClass(arguments, dynamoDbProperties, options))
        );

        foreach (var line in code)
            yield return line;

        yield return $"// <auto-generated | Duration {TimeSpan.FromTicks(Stopwatch.GetTimestamp() - timestamp)}>";
    }
}